function IPList()
{
    this.iList=[];
    this.c=0;
}

// if no, returns false; if yes, returns [d1, d2, d3, d4, 32];
function checkIP(str)
{
    var ipSpec=/^(\d*)\.(\d*)\.(\d*)\.(\d*)$/;
    ipRes=ipSpec.exec(str);
    if (ipRes==null || ipRes.length!=5)
        return false;

    ipRes.shift();
    res=[];
    for (var i=0; i<ipRes.length; i++)
    {
        var j=parseInt(ipRes[i]);
        if (j>=0 && j<=255)
        {
            res.push(j);
        }
        else return false;
    }

    res.push(32);
    return res;
}

// if no, returns false; if yes, returns [d1, d2, d3, d4, d5];
function checkSubnet(str)
{
    var ipSpec=/^(\d*)\.(\d*)\.(\d*)\.(\d*)\/(\d*)$/;
    ipRes=ipSpec.exec(str);
    if (ipRes==null || ipRes.length!=6)
        return false;

    ipRes.shift();
    res=[];
    for (var i=0; i<ipRes.length; i++)
    {
        var j=parseInt(ipRes[i]);
        if (i!=ipRes.length-1 && j>=0 && j<=255 || i==ipRes.length-1 && j>=0 && j<=32)
        {
            res.push(j);
        }
        else return false;
    }

    return res;
}

IPList.prototype.push=function(ip)
{
    var t=checkIP(ip);
    if (t===false)
    {
        t=checkSubnet(ip);
        if (t===false)
            return;
    }

    t[4]=32-t[4];
    var netMask=t[4];
    var i=3;
    while (netMask>0)
    {
        var mask=Math.min(netMask, 8);
        netMask-=mask;
        t[i]&=((1<<mask)-1)^255;
        i--;
    }
    t.push(0);  // lower-count
    t.push(0);  // upper-count
    if (t[4]>16)
    {
        t.push((1<<16)-1);
        t.push((1<<(t[4]-16))-1);
    }
    else
    {
        t.push((1<<t[4])-1);
        t.push(0);
    }

    this.iList.push(t);
}
IPList.prototype.list=function()
{
    var res=[];
    while (true)
    {
        var p=this.next();
        if (p==null)
            break;
        res.push(p);
    }
    return res;
}
IPList.prototype.recount=function()
{
    for (var i=0; i<this.iList.length; i++)
    {
        var cList=this.iList[i];
        cList[5]=cList[6]=0;
    }
    this.c=0;
}
IPList.prototype.next=function()
{
    if (this.c>=this.iList.length)
        return null;
    var cList=this.iList[this.c];
    /*
    index= 0            1           2           3           4
    cList=[ipSegment1,  ipSegment2, ipSegment1, ipSegment4, subnetVariance,
    index= 5            6                       7           8
    cList= progessLower,progressUpper,          maxPL,      maxUL]
    */
    if (cList[6]>cList[8] || (cList[6]==cList[8] && cList[5]>cList[7]))
    {
        // Out-of-bound, turn to the next;
        // it is indeed trivial 'cause the next check;
        this.c++;
        return this.next();
    }
    var ip1=cList[0]+(cList[6]>>8);
    var ip2=cList[1]+(cList[6]&0xff);
    var ip3=cList[2]+(cList[5]>>8);
    var ip4=cList[3]+(cList[5]&0xff);
    cList[5]++;
    if (cList[5]>0xffff)
    {
        cList[5]-=0xffff;
        cList[6]++;
    }
    if (cList[5]==cList[7] && cList[6]==cList[8])
        this.c++;

    return ip1+"."+ip2+"."+ip3+"."+ip4;
}

function test()
{
    var ipl=new IPList();
    ipl.push("255.256.123.125");
    ipl.push("-3.127.123.125");
    ipl.push("1.127.123.125");
    ipl.push("59.66.137.81/33");
    ipl.push("59.66.137.81/24");
    ipl.push("255.255.255.255/4");
    ipl.push("59.66.137");
    ipl.push("levy.at");
    console.log(ipl.iList);
}

module.exports=IPList;

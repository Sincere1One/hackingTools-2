kernel=require("./exploitKernel");
ipl=require("./ipList");

function processArgs()
{
    var args=process.argv;
    var res={};

    var key="", value=[];
    for (var i=2; i<args.length; i++)
        if (args[i].length>0 && args[i][0]=="-")
        {
            if (key!="")
                res[key]=value;
            key=args[i].substr(1);
            value=[];
        }
        else
            value.push(args[i]);
    if (key!="")
        res[key]=value;

    return res;
}

function main(callback)
{
    var arg=processArgs();
    if (arg["h"]!=null)
    {
        // TODO: output help info.
        callback();
        return;
    }
    if (arg["a"]!=null)
    {
        // Attack in method
        var attackList=arg["a"];
        var ipList=arg["host"];
        console.log("# Attacking log");
        console.log("- Start Time: "+(new Date()).toLocaleString());
        console.log("- Original Arguments: "+JSON.stringify(arg));

        console.log("## IP Check-in");
        if (ipList==null)
        {
            console.log("No arguments to specify host. Quit.");
            callback();
            return;
        }
        var ips=new ipl();
        for (var i=0; i<ipList.length; i++)
        {
            if (ips.push(ipList[i]))
                console.log("- Check in: "+ipList[i]);
        }

        var countTotal=0;
        var callbackGen=function(attackName)
        {
            return function(data){
                    console.log("## Attack Method: "+attackName);
                    //console.log(JSON.stringify(data));
                    for (var i in data)
                    {
                        if (data[i][0]==0)
                            console.log("- "+i+"\t\t"+"FAIL.");
                        else
                        {
                            console.log("- "+i+"\t\t"+"**SUCC.**");
                            console.log("\t- "+data[i][1]);
                        }
                    }
                    countTotal++;
                    if (countTotal==attackList.length)
                        callback();
            }
        }
        for (var i=0; i<attackList.length; i++)
        {
            if (attackList[i] in kernel.Func)
            {
                kernel.Go(attackList[i], ips.clone(), kernel.BAIDU_PORT1, arg, callbackGen(attackList[i]));
            }
            else
            {
                console.log("## Attack Method: "+attackList[i]);
                console.log("Invalid Method.");
                countTotal++;
                if (countTotal==attackList.length)
                    callback();
            }
        }
    }
}

main(function()
{
    console.log("## eof.")
});
